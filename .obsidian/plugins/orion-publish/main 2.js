/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => OrionPublish
});
module.exports = __toCommonJS(main_exports);
var import_obsidian3 = require("obsidian");

// src/ui/settingsTab.ts
var import_obsidian = require("obsidian");
var SettingsTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("URL").setDesc("The URL of the Orion server").addText(
      (text) => text.setPlaceholder("URL").setValue(this.plugin.db.settings.url).onChange(async (value) => {
        this.plugin.db.settings.url = value;
        await this.plugin.db.save();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Enable Feeds").setDesc("Enable Publishing to Feeds").addToggle(
      (toggle) => toggle.setValue(this.plugin.db.settings.feedsEnabled).onChange(async (value) => {
        this.plugin.db.settings.feedsEnabled = value;
        await this.plugin.db.save();
        if (value) {
          await this.addFeedsUi();
        } else {
          this.removeFeedUi();
        }
      })
    );
    if (this.plugin.db.settings.feedsEnabled) {
      this.addFeedsUi();
    }
  }
  async addFeedsUi() {
    const { containerEl } = this;
    const { feeds } = this.plugin.db.settings;
    const feedsContainer = containerEl.createEl("div", {
      cls: "orion-publish-feeds"
    });
    feedsContainer.createEl("h3", { text: "Feeds" });
    const inputContainer = feedsContainer.createEl("div", {
      cls: "orion-publish-feeds__new"
    });
    const textField = new import_obsidian.TextComponent(inputContainer).setPlaceholder(
      "Feed Name"
    );
    new import_obsidian.ButtonComponent(inputContainer).setIcon("plus").setTooltip("Add Feed").onClick(async () => {
      const name = textField.getValue();
      if (!name)
        return;
      textField.setValue("");
      try {
        const { id } = await this.plugin.client.createFeed(name);
        this.addFeedToList(feedsContainer, id, name);
      } catch (e) {
        new import_obsidian.Notice(`Failed to create feed: ${e}`);
      }
    });
    feeds.forEach((feed) => {
      this.addFeedToList(feedsContainer, feed.id, feed.title);
    });
  }
  async removeFeedUi() {
    var _a;
    const elements = this.containerEl.getElementsByClassName(
      "orion-publish-feeds"
    );
    (_a = elements.item(0)) == null ? void 0 : _a.remove();
  }
  async addFeedToList(parent, id, name) {
    let feedsList = parent.getElementsByClassName("orion-publish-feeds__list").item(0);
    if (!feedsList) {
      feedsList = parent.createEl("div", {
        cls: "orion-publish-feeds__list"
      });
    }
    const setting = new import_obsidian.Setting(feedsList).setName(name).addButton((button) => {
      button.setIcon("trash").setTooltip("Delete Feed").onClick(async () => {
        try {
          await this.plugin.client.deleteFeed(id);
          setting.settingEl.remove();
        } catch (e) {
          new import_obsidian.Notice(`Failed to delete feed: ${e}`);
        }
      });
    });
  }
};

// src/http.ts
var HTTP = class {
  static async request(method, url, body) {
    const response = await fetch(url, {
      method,
      body: JSON.stringify(body)
    });
    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${response.statusText}`);
    }
    return await response.json();
  }
  static async get(url) {
    return await HTTP.request("GET", url);
  }
  static async post(url, body) {
    return await HTTP.request("POST", url, body);
  }
  static async put(url, body) {
    return await HTTP.request("PUT", url, body);
  }
  static async delete(url, body) {
    return await HTTP.request("DELETE", url, body);
  }
};

// src/orionClient.ts
var OrionClientError = class extends Error {
};
var OrionClient = class {
  constructor(config) {
    this.db = config.db;
    this.fileManager = config.fileManager;
  }
  get baseUrl() {
    return this.db.settings.url;
  }
  async createPost(file, feed = null) {
    const publishedFile = this.db.getPublishedFile(file);
    if (publishedFile) {
      throw new OrionClientError(
        `File ${file.path} is already published`
      );
    }
    const contents = await this.fileManager.getFileContents(file);
    const payload = {
      title: file.basename,
      content: contents,
      feedId: feed == null ? void 0 : feed.id,
      feedToken: feed == null ? void 0 : feed.token
    };
    const { post } = await HTTP.post(`${this.baseUrl}/api/posts`, payload);
    this.db.addPublishedFile(file, post.id, post.token);
    return post;
  }
  async updatePost(file, feedId = null) {
    const publishedFile = this.db.getPublishedFile(file);
    if (!publishedFile) {
      throw new OrionClientError(`File ${file.path} is not published`);
    }
    const { id, token } = publishedFile;
    const contents = await this.fileManager.getFileContents(file);
    const payload = {
      title: file.basename,
      content: contents,
      feedId,
      token
    };
    return HTTP.put(`${this.baseUrl}/api/posts/${id}`, payload);
  }
  async deletePost(file) {
    const publishedFile = this.db.getPublishedFile(file);
    if (!publishedFile) {
      throw new OrionClientError(`File ${file.path} is not published`);
    }
    const { id, token } = publishedFile;
    await HTTP.delete(`${this.baseUrl}/api/posts/${id}`, {
      token
    });
    await this.db.deletePublishedFile(file);
  }
  async createFeed(title) {
    const payload = {
      title
    };
    const { feed } = await HTTP.post(`${this.baseUrl}/api/feeds`, payload);
    await this.db.addFeed(feed);
    return feed;
  }
  async deleteFeed(id) {
    const feed = this.db.getFeed(id);
    if (!feed) {
      throw new OrionClientError(`Feed ${id} does not exist`);
    }
    await HTTP.delete(`${this.baseUrl}/api/feeds/${id}`, {
      token: feed.token
    });
    await this.db.deleteFeed(id);
  }
};

// src/db.ts
var DEFAULT_CONFIG = {
  settings: {
    url: "https://orion.seancollings.dev",
    feedsEnabled: false,
    feeds: []
  },
  publishedFiles: {}
};
var DataFileDB = class {
  constructor(plugin) {
    this.plugin = plugin;
  }
  get settings() {
    return this.data.settings;
  }
  async addPublishedFile(file, id, token) {
    this.data.publishedFiles[file.path] = { id, token };
    await this.save();
  }
  async deletePublishedFile(file) {
    delete this.data.publishedFiles[file.path];
    await this.save();
  }
  getPublishedFile(file) {
    return this.data.publishedFiles[file.path] || null;
  }
  async addFeed(feed) {
    this.data.settings.feeds.push(feed);
    await this.save();
  }
  getFeed(id) {
    return this.data.settings.feeds.find((feed) => feed.id === id) || null;
  }
  async deleteFeed(id) {
    this.data.settings.feeds = this.data.settings.feeds.filter(
      (feed) => feed.id !== id
    );
    await this.save();
  }
  async load() {
    this.data = Object.assign(
      {},
      DEFAULT_CONFIG,
      await this.plugin.loadData()
    );
  }
  async save() {
    await this.plugin.saveData(this.data);
  }
};

// src/file.ts
var ObsidianNoteProcessor = class {
  constructor(app) {
    this.app = app;
  }
  async getFileContents(file) {
    return this.app.vault.cachedRead(file);
  }
  async processFile(file) {
  }
};

// src/ui/feedsModal.ts
var import_obsidian2 = require("obsidian");
var SelectFeedModal = class extends import_obsidian2.FuzzySuggestModal {
  constructor(app, feeds, onChoose) {
    super(app);
    this.feeds = Object.fromEntries(feeds.map((feed) => [feed.id, feed]));
    this.feeds["none"] = {
      id: "none",
      title: "Publish without a feed",
      token: ""
    };
    this.setPlaceholder("Select a feed to publish to");
    this.onChoose = onChoose;
  }
  getItems() {
    return Object.keys(this.feeds);
  }
  getItemText(feedId) {
    return this.feeds[feedId].title;
  }
  onChooseItem(feedId) {
    if (feedId === "none") {
      this.onChoose(null);
    } else {
      this.onChoose(this.feeds[feedId]);
    }
  }
};

// src/main.ts
var OrionPublish = class extends import_obsidian3.Plugin {
  async onload() {
    try {
      await this.init();
      await this.addCommands();
    } catch (e) {
      console.error(e);
      new import_obsidian3.Notice(`Orion Publish failed to load: ${e}`);
    }
  }
  async init() {
    this.db = new DataFileDB(this);
    await this.db.load();
    this.addSettingTab(new SettingsTab(this.app, this));
    this.client = new OrionClient({
      fileManager: new ObsidianNoteProcessor(this.app),
      db: this.db
    });
  }
  async addCommands() {
    this.addCommand({
      id: "orion-publish.publish",
      name: "Publish Note",
      editorCallback: async (editor, view) => {
        const { file } = view;
        if (!file)
          return;
        const publishedFile = this.db.getPublishedFile(file);
        if (publishedFile) {
          new import_obsidian3.Notice("Note is already published");
          return;
        }
        if (this.db.settings.feedsEnabled && this.db.settings.feeds.length > 0) {
          const modal = new SelectFeedModal(
            this.app,
            this.db.settings.feeds,
            async (feed) => {
              await this.createOrUpdatePost(file, feed);
            }
          );
          modal.open();
        } else {
          await this.createOrUpdatePost(file);
        }
      }
    });
    this.addCommand({
      id: "orion-publish.update",
      name: "Update Published Note",
      editorCallback: async (editor, view) => {
        const { file } = view;
        if (!file)
          return;
        await this.createOrUpdatePost(file);
      }
    });
    this.addCommand({
      id: "orion-publish.delete",
      name: "Un-publish Note",
      editorCallback: async (editor, view) => {
        const { file } = view;
        if (!file)
          return;
        try {
          await this.client.deletePost(file);
          new import_obsidian3.Notice("Note unpublished");
        } catch (e) {
          new import_obsidian3.Notice(e.message);
        }
      }
    });
    this.addCommand({
      id: "orion-publish.get-url",
      name: "Copy Published Note URL",
      editorCallback: async (editor, view) => {
        const { file } = view;
        if (file)
          this.copyUrlToClipboard(file);
      }
    });
  }
  async createOrUpdatePost(file, feed = null) {
    const publishedFile = this.db.getPublishedFile(file);
    try {
      if (publishedFile) {
        await this.client.updatePost(file);
        new import_obsidian3.Notice("Note updated");
      } else {
        await this.client.createPost(file, feed);
        new import_obsidian3.Notice("Note published");
      }
      this.copyUrlToClipboard(file);
    } catch (e) {
      new import_obsidian3.Notice(e.message);
    }
  }
  async copyUrlToClipboard(file) {
    const publishedFile = this.db.getPublishedFile(file);
    if (!publishedFile) {
      new import_obsidian3.Notice("Note is not published");
      return;
    }
    const url = `${this.db.settings.url}/p/${publishedFile.id}`;
    navigator.clipboard.writeText(url);
  }
};
